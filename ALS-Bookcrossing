{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11570,"status":"ok","timestamp":1644986598925,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"-yLrw29HALw0","outputId":"73962a3b-0582-4a26-b5da-102df4cd193d"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[33m\r0% [Working]\u001b[0m\r            \rGet:1 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]\n","\u001b[33m\r0% [Connecting to archive.ubuntu.com (91.189.88.152)] [1 InRelease 14.2 kB/88.7\u001b[0m\r                                                                               \rGet:2 https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/ InRelease [3,626 B]\n","Ign:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  InRelease\n","Ign:4 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  InRelease\n","Get:5 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic InRelease [15.9 kB]\n","Get:6 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release [696 B]\n","Hit:7 https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64  Release\n","Get:8 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Release.gpg [836 B]\n","Hit:9 http://archive.ubuntu.com/ubuntu bionic InRelease\n","Get:10 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]\n","Hit:11 http://ppa.launchpad.net/cran/libgit2/ubuntu bionic InRelease\n","Get:12 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]\n","Get:13 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic InRelease [15.9 kB]\n","Get:14 http://security.ubuntu.com/ubuntu bionic-security/multiverse amd64 Packages [21.1 kB]\n","Get:15 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic InRelease [21.3 kB]\n","Get:16 http://security.ubuntu.com/ubuntu bionic-security/main amd64 Packages [2,565 kB]\n","Get:17 http://security.ubuntu.com/ubuntu bionic-security/restricted amd64 Packages [783 kB]\n","Get:18 http://security.ubuntu.com/ubuntu bionic-security/universe amd64 Packages [1,470 kB]\n","Get:20 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64  Packages [917 kB]\n","Get:21 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main Sources [1,826 kB]\n","Get:22 http://ppa.launchpad.net/c2d4u.team/c2d4u4.0+/ubuntu bionic/main amd64 Packages [936 kB]\n","Get:23 http://archive.ubuntu.com/ubuntu bionic-updates/universe amd64 Packages [2,248 kB]\n","Get:24 http://archive.ubuntu.com/ubuntu bionic-updates/multiverse amd64 Packages [29.0 kB]\n","Get:25 http://archive.ubuntu.com/ubuntu bionic-updates/restricted amd64 Packages [816 kB]\n","Get:26 http://archive.ubuntu.com/ubuntu bionic-updates/main amd64 Packages [3,004 kB]\n","Get:27 http://ppa.launchpad.net/deadsnakes/ppa/ubuntu bionic/main amd64 Packages [45.3 kB]\n","Get:28 http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu bionic/main amd64 Packages [42.8 kB]\n","Fetched 15.0 MB in 8s (1,875 kB/s)\n","Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","66 packages can be upgraded. Run 'apt list --upgradable' to see them.\n"]}],"source":["! apt update"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"Z3Riz5g990hW","executionInfo":{"status":"ok","timestamp":1644986626762,"user_tz":-420,"elapsed":27844,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}}},"outputs":[],"source":["#Java JDK\n","!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","#Downloading Spark\n","!wget -q https://archive.apache.org/dist/spark/spark-3.0.0/spark-3.0.0-bin-hadoop3.2.tgz\n","#Unzipping the hadoop file\n","!tar xf spark-3.0.0-bin-hadoop3.2.tgz"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1862,"status":"ok","timestamp":1644987297014,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"xk5wePix94Ef","outputId":"aa58636e-9f7d-4d8e-b624-1dbbeac7e644"},"outputs":[{"output_type":"stream","name":"stdout","text":["Archive:  book1M.zip\n","   creating: book1M/\n","  inflating: book1M/BX-Book-Ratings.csv  \n","  inflating: book1M/BX-Books.csv     \n","  inflating: book1M/BX-Users.csv     \n","  inflating: book1M/explicit_ratings_books.csv  \n"]}],"source":["#Unzip the file\n","!unzip book1M.zip"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"xie483cW980m","executionInfo":{"status":"ok","timestamp":1644986631495,"user_tz":-420,"elapsed":4742,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}}},"outputs":[],"source":["###################### SPARK SETUP ################################\n","#Install findspark\n","!pip install -q findspark"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3748,"status":"ok","timestamp":1644986635234,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"uetiZ7hS9_C7","outputId":"69ddfb63-e6a6-48ce-d871-fe810f7ae4b5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting py4j\n","  Downloading py4j-0.10.9.3-py2.py3-none-any.whl (198 kB)\n","\u001b[?25l\r\u001b[K     |█▋                              | 10 kB 18.6 MB/s eta 0:00:01\r\u001b[K     |███▎                            | 20 kB 22.2 MB/s eta 0:00:01\r\u001b[K     |█████                           | 30 kB 12.6 MB/s eta 0:00:01\r\u001b[K     |██████▋                         | 40 kB 10.5 MB/s eta 0:00:01\r\u001b[K     |████████▎                       | 51 kB 6.2 MB/s eta 0:00:01\r\u001b[K     |█████████▉                      | 61 kB 5.3 MB/s eta 0:00:01\r\u001b[K     |███████████▌                    | 71 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |█████████████▏                  | 81 kB 6.3 MB/s eta 0:00:01\r\u001b[K     |██████████████▉                 | 92 kB 5.1 MB/s eta 0:00:01\r\u001b[K     |████████████████▌               | 102 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 112 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |███████████████████▊            | 122 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |█████████████████████▍          | 133 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 143 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |████████████████████████▊       | 153 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▍     | 163 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 174 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▋  | 184 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▎| 194 kB 5.6 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 198 kB 5.6 MB/s \n","\u001b[?25hInstalling collected packages: py4j\n","Successfully installed py4j-0.10.9.3\n"]}],"source":["!pip install py4j"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"W97LNBHW-4zO","executionInfo":{"status":"ok","timestamp":1644986635234,"user_tz":-420,"elapsed":7,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}}},"outputs":[],"source":["#Setting up environment variables\n","import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = \"/content/spark-3.0.0-bin-hadoop3.2\""]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":198},"executionInfo":{"elapsed":10021,"status":"ok","timestamp":1644986645250,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"uLjmc1d--BE5","outputId":"93117295-3979-47a2-99fb-682239d8e12c"},"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","        <div>\n","            <p><b>SparkContext</b></p>\n","\n","            <p><a href=\"http://f182c0ae538c:4040\">Spark UI</a></p>\n","\n","            <dl>\n","              <dt>Version</dt>\n","                <dd><code>v3.0.0</code></dd>\n","              <dt>Master</dt>\n","                <dd><code>local[*]</code></dd>\n","              <dt>AppName</dt>\n","                <dd><code>pyspark-shell</code></dd>\n","            </dl>\n","        </div>\n","        "],"text/plain":["<SparkContext master=local[*] appName=pyspark-shell>"]},"metadata":{},"execution_count":6}],"source":["#Initialize Spark session using findspark lib\n","import findspark\n","findspark.init()\n","from pyspark.sql import SparkSession\n","spark = SparkSession.builder.master(\"local[*]\").getOrCreate()\n","sc = spark.sparkContext\n","sc"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"weXJ8qyfpVXF","executionInfo":{"status":"ok","timestamp":1644986783020,"user_tz":-420,"elapsed":362,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","from pyspark import SparkContext, SQLContext\n","\n","from pyspark.sql.functions import *\n","from pyspark.sql import functions as F\n","\n","from pyspark.sql.functions import lit\n","from pyspark.ml.feature import IndexToString\n","from pyspark.ml.feature import StringIndexer\n","from pyspark.sql.functions import col\n","from pyspark.ml.tuning import ParamGridBuilder, TrainValidationSplit,CrossValidator\n","from pyspark.ml.evaluation import RegressionEvaluator\n","from pyspark.ml.recommendation import ALS\n","from pyspark.ml import Pipeline, PipelineModel"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7snafWyypcnh"},"outputs":[],"source":["from pyspark.sql import functions as f"]},{"cell_type":"markdown","metadata":{"id":"zrnte6yI-G30"},"source":["**read the data file**"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"FQHcLDCZ12Le","executionInfo":{"status":"ok","timestamp":1644987315107,"user_tz":-420,"elapsed":10995,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}}},"outputs":[],"source":["df = spark.read.csv(path = '/content/book1M/explicit_ratings_books.csv', header = True,inferSchema = True)"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1644987315108,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"NSHz6deo1_yQ","outputId":"4fec4e15-b2bf-467f-ab01-1f5d0801df98"},"outputs":[{"output_type":"stream","name":"stdout","text":["root\n"," |-- userID: integer (nullable = true)\n"," |-- ISBN: string (nullable = true)\n"," |-- rating: integer (nullable = true)\n"," |-- title: string (nullable = true)\n"," |-- author: string (nullable = true)\n"," |-- yearOfPublication: string (nullable = true)\n"," |-- publisher: string (nullable = true)\n"," |-- age: string (nullable = true)\n"," |-- country: string (nullable = true)\n","\n"]}],"source":["df.printSchema()"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":551,"status":"ok","timestamp":1644987315653,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"RI8xvVnU2Fd5","outputId":"da875eb9-e9ea-4dbc-8980-deaabb1955f6"},"outputs":[{"output_type":"stream","name":"stdout","text":["+------+----------+------+--------------------+----------------+-----------------+--------------------+---+-------------+\n","|userID|      ISBN|rating|               title|          author|yearOfPublication|           publisher|age|      country|\n","+------+----------+------+--------------------+----------------+-----------------+--------------------+---+-------------+\n","|276726|0155061224|     5|    Rites of Passage|      Judith Rae|             2001|              Heinle| 34|          usa|\n","|276729|052165615X|     3|      Help!: Level 1|   Philip Prowse|             1999|Cambridge Univers...| 16|      croatia|\n","|276729|0521795028|     6|The Amsterdam Con...|     Sue Leather|             2001|Cambridge Univers...| 16|      croatia|\n","|276744|038550120X|     7|     A Painted House|    JOHN GRISHAM|             2001|           Doubleday| 34|          usa|\n","|276747|0060517794|     9|Little Altars Eve...|   Rebecca Wells|             2003|         HarperTorch| 25|          usa|\n","|276747|0671537458|     9|   Waiting to Exhale|  Terry McMillan|             1995|              Pocket| 25|          usa|\n","|276747|0679776818|     8|Birdsong: A Novel...|Sebastian Faulks|             1997|   Vintage Books USA| 25|          usa|\n","|276747|0943066433|     7|How to Deal With ...|   Rick Brinkman|             1995|    Careertrack Inc.| 25|          usa|\n","|276747|1885408226|     7|The Golden Rule o...|        Aye Jaye|             1998|Listen &amp; Live...| 25|          usa|\n","|276748|0747558167|     6|Apricots on the N...| Colette Rossant|             2002|Bloomsbury Publis...| 39| saudi arabia|\n","+------+----------+------+--------------------+----------------+-----------------+--------------------+---+-------------+\n","only showing top 10 rows\n","\n"]}],"source":["df.show(10,truncate=True)"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1436,"status":"ok","timestamp":1644987318238,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"JsymeIKd2Zfi","outputId":"8221a602-bbc8-4af7-9750-01eee48fbd9f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["383842"]},"metadata":{},"execution_count":13}],"source":["df.count()"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13252,"status":"ok","timestamp":1644987331486,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"iuUJvrDH2cB1","outputId":"6a68fce6-d93b-4002-f1e2-45e77b53f7dd"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DataFrame[summary: string, userID: string, ISBN: string, rating: string, title: string, author: string, yearOfPublication: string, publisher: string, age: string, country: string]"]},"metadata":{},"execution_count":14}],"source":["df.describe()"]},{"cell_type":"markdown","metadata":{"id":"UwfatJ8U2iDP"},"source":["**Collaborative Filtering: Data Modeling using Alternating Least Square matrix (ALS)\n","Select required columns (UserID, ISBN, Ratings)**"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1644987331487,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"9eDpEpmE2zyi","outputId":"18189570-9f9d-413e-e888-fb84e8184804"},"outputs":[{"output_type":"stream","name":"stdout","text":["+------+----------+------+\n","|userID|      ISBN|rating|\n","+------+----------+------+\n","|276726|0155061224|     5|\n","|276729|052165615X|     3|\n","|276729|0521795028|     6|\n","|276744|038550120X|     7|\n","|276747|0060517794|     9|\n","|276747|0671537458|     9|\n","|276747|0679776818|     8|\n","|276747|0943066433|     7|\n","|276747|1885408226|     7|\n","|276748|0747558167|     6|\n","|276751|3596218098|     8|\n","|276754|0684867621|     8|\n","|276755|0451166892|     5|\n","|276762|0380711524|     5|\n","|276762|3453092007|     8|\n","|276772|0553572369|     7|\n","|276772|3499230933|    10|\n","|276772|3596151465|    10|\n","|276774|3442136644|     9|\n","|276786|8437606322|     8|\n","+------+----------+------+\n","only showing top 20 rows\n","\n"]}],"source":["# selecting the columns to work with in the dataset, we do not need all columns for the prediction, only userID, ISBN & rating column \n","data=df.select(df['userID'],df['ISBN'],df['rating'])\n","data.show()"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10192,"status":"ok","timestamp":1644987341674,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"c5achpN224FE","outputId":"e3b458de-14c8-4b2c-81d6-9343fa884734"},"outputs":[{"output_type":"stream","name":"stdout","text":["+------+----------+------+------------+----------+\n","|userID|      ISBN|rating|userID_index|ISBN_index|\n","+------+----------+------+------------+----------+\n","|276726|0155061224|     5|     56337.0|   58420.0|\n","|276729|052165615X|     3|     26364.0|   87191.0|\n","|276729|0521795028|     6|     26364.0|   87208.0|\n","|276744|038550120X|     7|     56338.0|     216.0|\n","|276747|0060517794|     9|     12196.0|    1070.0|\n","|276747|0671537458|     9|     12196.0|    2592.0|\n","|276747|0679776818|     8|     12196.0|    1951.0|\n","|276747|0943066433|     7|     12196.0|  124008.0|\n","|276747|1885408226|     7|     12196.0|  137096.0|\n","|276748|0747558167|     6|     56339.0|   42440.0|\n","|276751|3596218098|     8|     56340.0|  145073.0|\n","|276754|0684867621|     8|     56341.0|     374.0|\n","|276755|0451166892|     5|     56342.0|     198.0|\n","|276762|0380711524|     5|     26365.0|    2698.0|\n","|276762|3453092007|     8|     26365.0|   27412.0|\n","|276772|0553572369|     7|     18853.0|    6882.0|\n","|276772|3499230933|    10|     18853.0|   10685.0|\n","|276772|3596151465|    10|     18853.0|   49660.0|\n","|276774|3442136644|     9|     56343.0|   27308.0|\n","|276786|8437606322|     8|     26367.0|   50036.0|\n","+------+----------+------+------------+----------+\n","only showing top 20 rows\n","\n"]}],"source":["# Converting String columns (userID & ISBN) to index\n","s_indexer = [StringIndexer(inputCol=column, outputCol=column+\"_index\") for column in list(set(data.columns)-set(['rating'])) ]\n","pipeline = Pipeline(stages=s_indexer)\n","dftransform = pipeline.fit(data).transform(data)\n","dftransform.show()"]},{"cell_type":"markdown","metadata":{"id":"Hi_9vvB_Zh0m"},"source":["Membagi dataset yang sudah dilakukan cleaning ke dalam 2 bagian, Data Training\n","(80%) dan Data Testing (20%)."]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6838,"status":"ok","timestamp":1644987348508,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"zRO8nPsiAHW7","outputId":"0c216400-7c15-4fdf-a57f-608b2a392c27"},"outputs":[{"output_type":"stream","name":"stdout","text":["  Train dataset: 307188 rows\n","  Test dataset:  76654 rows\n"]}],"source":["# Randomly split the data into train and test where 80% data is in train and remaining is test\n","train, test = dftransform.randomSplit([0.8, 0.2])\n","print(\"  Train dataset:\", train.count(), \"rows\")\n","print(\"  Test dataset: \", test.count(), \"rows\")"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"N7lkvoirAObF","executionInfo":{"status":"ok","timestamp":1644987426361,"user_tz":-420,"elapsed":76828,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}}},"outputs":[],"source":["# Build a recommendation model using Alternating Least Squares method\n","# Evaluate the model by computing the RMSE on the test data\n","model = ALS(userCol=\"userID_index\", itemCol=\"ISBN_index\", ratingCol=\"rating\",rank=20, maxIter=10, nonnegative=True, coldStartStrategy=\"drop\").fit(train)\n","\n","from pyspark.ml.evaluation import RegressionEvaluator\n","evaluator=RegressionEvaluator(metricName=\"rmse\",labelCol=\"rating\",predictionCol=\"prediction\")"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":135409,"status":"ok","timestamp":1644987873282,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"},"user_tz":-420},"id":"ZuhePNMddekp","outputId":"0f581f6b-adf3-42cf-eabc-d3ebfbdbecef"},"outputs":[{"output_type":"stream","name":"stdout","text":["New RMSE:  2.4672306900625056\n"]}],"source":["# Make predictions and print the RMSE of the ALS model\n","predictions=model.transform(test)\n","rmse=evaluator.evaluate(predictions)\n","print(\"New RMSE: \", evaluator.evaluate(model.transform(test)))"]},{"cell_type":"markdown","metadata":{"id":"dyVPtl3rOMvz"},"source":["***Implementing ALS with Cross Validation***"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W6otrnE_OOvi"},"outputs":[],"source":["# Import the required functions\n","from pyspark.ml.evaluation import RegressionEvaluator\n","from pyspark.ml.recommendation import ALS\n","from pyspark.ml.tuning import ParamGridBuilder, CrossValidator"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FkLR-uqnOSTZ"},"outputs":[],"source":["# Now we try to improve the performance of the original model using cross validation and solve the cold-start problem.\n","# we set cold start strategy to 'drop' to ensure we don't get NaN evaluation metrics\n","\n","model = ALS(userCol=\"userID_index\", itemCol=\"ISBN_index\", ratingCol=\"rating\", nonnegative = True, coldStartStrategy=\"drop\")\n","\n","#For Parameter tuning of the ALS model we use ParamGridBuilder function\n","#We tune two parameters \n","#1. The Regularization parameter ranging from 0.1, 0.01, 0.001, 0.0001\n","#2. The rank for matrix factorization\n","paramGrid = ParamGridBuilder() \\\n","    .addGrid(model.regParam, [0.1, 0.05, 0.01, 0.001]) \\\n","    .addGrid(model.rank, [5, 10, 20, 30]) \\\n","    .build()\n","\n","#Defining a cross-validator object\n","#Setting up CV and adding parameters. We will be performing a 5 fold CV\n","crossvalidation = CrossValidator(estimator = model,\n","                     estimatorParamMaps = paramGrid,\n","                     evaluator = evaluator,\n","                     numFolds=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dwf_045E-Ev1"},"outputs":[],"source":["\n","# Build cross validation using CrossValidator\n","cv = CrossValidator(estimator=model, estimatorParamMaps=paramGrid, evaluator=evaluator, numFolds=5)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":432},"id":"rodUDRw7FZp9","executionInfo":{"status":"error","timestamp":1644110398862,"user_tz":0,"elapsed":463197,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"16fab749-fb13-472c-ec7a-a3aafade137f"},"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/usr/lib/python3.7/multiprocessing/pool.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 733\u001b[0;31m                 \u001b[0mitem\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_items\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopleft\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    734\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: pop from an empty deque","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-5aeb18a7c240>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Fit cross validator to the 'train' dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcrossvalidation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#Extract best model from the cv model above\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mbest_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbestModel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/spark-3.0.0-bin-hadoop3.2/python/pyspark/ml/base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, dataset, params)\u001b[0m\n\u001b[1;32m    127\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 129\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    130\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m             raise ValueError(\"Params must be either a param map or a list/tuple of param maps, \"\n","\u001b[0;32m/content/spark-3.0.0-bin-hadoop3.2/python/pyspark/ml/tuning.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, dataset)\u001b[0m\n\u001b[1;32m    350\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m             \u001b[0mtasks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_parallelFitTasks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0meva\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 352\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubModel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpool\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimap_unordered\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    353\u001b[0m                 \u001b[0mmetrics\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmetric\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mnFolds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    354\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mcollectSubModelsParam\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/multiprocessing/pool.py\u001b[0m in \u001b[0;36mnext\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    735\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_index\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_length\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                     \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 737\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cond\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    738\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    739\u001b[0m                     \u001b[0mitem\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_items\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopleft\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/threading.py\u001b[0m in \u001b[0;36mwait\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    294\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m    \u001b[0;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m                 \u001b[0mwaiter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["#Fit cross validator to the 'train' dataset\n","model = crossvalidation.fit(train)\n","\n","#Extract best model from the cv model above\n","best_model = model.bestModel"]},{"cell_type":"markdown","metadata":{"id":"IfehHt6dO82C"},"source":["***Printing the Best Model's parameter values***"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"REBX5-M0PBRj","executionInfo":{"status":"ok","timestamp":1644103964748,"user_tz":0,"elapsed":57133,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}},"outputId":"1267f6d9-2589-4117-94c6-e036aa2fe6ce"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pyspark.ml.recommendation.ALSModel'>\n","**Best Model**\n","Rank:  5\n","MaxIter:  10\n","RegParam:  0.1\n","Best RMSE value is:  2.4496507228394355\n"]}],"source":["#The Best_model\n","print(type(best_model))\n","#Complete the code below to extract the ALS model parameters\n","print(\"**Best Model**\")\n","#Rank\n","print(\"Rank: \", best_model._java_obj.parent().getRank())\n","#MaxIter\n","print(\"MaxIter: \", best_model._java_obj.parent().getMaxIter())\n","#RegParam\n","print(\"RegParam: \", best_model._java_obj.parent().getRegParam())\n","# Calculate the RMSE on test data using the best set of parameters obtained after cross validation\n","print(\"Best RMSE value is: \", evaluator.evaluate(best_model.transform(test)))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"JGqyplx69y9v"},"outputs":[],"source":["# Define evaluator as RMSE and print length of evaluator\n","evaluator = RegressionEvaluator(\n","           metricName=\"rmse\", \n","           labelCol=\"rating\", \n","           predictionCol=\"prediction\") \n","print (\"Num models to be tested: \", len(paramGrid))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Tw4jLrxLSwPN"},"outputs":[],"source":["pred = best_model.transform(test)\n","pred.show(10)"]},{"cell_type":"markdown","metadata":{"id":"v3MVEPh3ErvH"},"source":["***Data Sparsity and Cold Start***"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wmZ5NdIGEjA4","outputId":"e2aa00bb-a759-48e0-defb-ed3071658d84","executionInfo":{"status":"ok","timestamp":1644990894894,"user_tz":-420,"elapsed":26655,"user":{"displayName":"1982 Avis Priyati","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04182794466118726271"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["The ratings dataframe is  100.00% sparse.\n"]}],"source":["def get_mat_sparsity(dftransform):\n","    # Count the total number of ratings in the dataset\n","    count_nonzero = dftransform.select(\"rating\").count()\n","\n","    # Count the number of distinct userIds and distinct movieIds\n","    total_elements = dftransform.select(\"userID_index\").distinct().count() * dftransform.select(\"ISBN_index\").distinct().count()\n","\n","    # Divide the numerator by the denominator\n","    sparsity = (1.0 -(count_nonzero *1.0)/total_elements)*100\n","    print(\"The ratings dataframe is \", \"%.2f\" % sparsity + \"% sparse.\")\n","    \n","get_mat_sparsity(dftransform)"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"ALS-Bookcrossing","provenance":[{"file_id":"1dwyEq7SCRGYjvgA4BJpP-gugvjeAuzdM","timestamp":1643940751297},{"file_id":"1w19vf4-cxQduC-_L5v5gF_UVldxrlF4u","timestamp":1643029598655}],"authorship_tag":"ABX9TyPC6pVq75hQfp80O1pN8rYw"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}